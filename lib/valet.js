// Generated by CoffeeScript 1.6.3
(function() {
  var app, config, deployment, emitter, express, found, idx, pjson, platform, port, utils, winston;

  express = require('express.io');

  winston = require('winston');

  pjson = require('../package.json');

  config = require('../config.json');

  emitter = require('./node-emitter');

  utils = require('./utils');

  app = express();

  app.http().io();

  app.use(express.bodyParser());

  app.configure(function() {
    return app.use(emitter(app.io, true));
  });

  winston.remove(winston.transports.Console);

  winston.add(winston.transports.Console, {
    colorize: true,
    timstamp: true
  });

  winston.add(winston.transports.File, {
    filename: 'winston.log',
    json: false,
    colorize: true
  });

  found = false;

  idx = 0;

  while (!found && config.platforms[idx]) {
    platform = config.platforms[idx];
    if (platform.trigger.equals) {
      if (process.env[platform.trigger.property] === platform.trigger.equals) {
        deployment = platform;
        found = true;
      }
    } else {
      if (process.env[platform.trigger.property]) {
        deployment = platform;
        found = true;
      }
    }
    idx++;
  }

  if (deployment) {
    winston.info("" + deployment.name + " deployment detected.");
    port = deployment.port;
  } else {
    winston.info('could not detect deployment. using default port.');
    port = config.default_port;
  }

  app.get('/', function(req, res) {
    return res.send("" + pjson.name + " version " + pjson.version);
  });

  app.post('/*', function(req, res) {
    return res.send(200);
  });

  app.io.on('connection', function(socket) {
    return winston.info('new socket connected');
  });

  app.io.route('post', function(req) {
    var data, namespace, split, _i, _len, _ref, _results;
    if (req.data.namespace && req.data.event && req.data.data) {
      split = utils.splitter(req.data.namespace);
      data = req.data.data;
      data.socket_namespace = split.socketspace;
      _ref = split.emit_to;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        namespace = _ref[_i];
        winston.info("emitting '" + req.data.event + "' to members of " + namespace);
        _results.push(app.io.of(namespace).emit(req.data.event, data));
      }
      return _results;
    } else {
      winston.error("missing params. you sent:");
      return winston.error(req.data);
    }
  });

  winston.info("" + pjson.name + " version " + pjson.version);

  winston.info("listening on port " + port);

  app.listen(port);

}).call(this);

/*
//@ sourceMappingURL=valet.map
*/
