// Generated by CoffeeScript 1.6.3
(function() {
  var utils, winston;

  winston = require("winston");

  utils = require('./utils');

  module.exports = function(io, debug) {
    var logLevel;
    if (debug == null) {
      debug = false;
    }
    if (!io) {
      winston.error('must pass in socket.io');
    }
    logLevel = debug ? 'info' : 'warn';
    winston.remove(winston.transports.Console);
    winston.add(winston.transports.Console, {
      colorize: true,
      timstamp: true,
      level: logLevel
    });
    winston.info('emitter middleware initialized');
    return function(req, res, next) {
      var error, key, split, toAdd, value;
      if (req.method === "POST") {
        req.namespace = req.path.substr(1, req.path.length);
        if (req.body.value) {
          try {
            toAdd = JSON.parse(req.body.value);
            for (key in toAdd) {
              value = toAdd[key];
              req.body[key] = value;
            }
          } catch (_error) {
            error = _error;
            winston.error("could not parse JSON :(");
            winston.error(error);
          }
        }
        if (!req.namespace) {
          return res.json(400, {
            error: 'Must POST to a /namespace'
          });
        } else if (!req.body.event) {
          return res.json(400, {
            error: 'Missing parameter: event'
          });
        } else if (!req.body.data) {
          return res.json(400, {
            error: 'Missing parameter: data'
          });
        } else {
          split = utils.splitter(req.namespace);
          utils.emitter(split.emit_to, split.socketspace, req.body.event, req.body.data, io);
          return next();
        }
      } else {
        winston.info("Method was " + req.method + " -- ignoring");
        return next();
      }
    };
  };

}).call(this);

/*
//@ sourceMappingURL=node-emitter.map
*/
